/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> preOrderTraversalList = new ArrayList<>();
        // recursive call to traverse the given root in pre order
        preOrderTraversal(root, preOrderTraversalList);
        return preOrderTraversalList;
    }
    private void preOrderTraversal(TreeNode root, List<Integer> preOrderTraversalList){
        // recursively call preOrderTraversal()  for left and right
        // root -> left - > right
        // if root is null simple return
        // add the current root val to list
        if(root == null) return;
        preOrderTraversalList.add(root.val);
        preOrderTraversal(root.left, preOrderTraversalList);
        preOrderTraversal(root.right, preOrderTraversalList);
    }
}