class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        // get the size of given triangle
        int n = triangle.size();
        // get the last row's size
        int m = triangle.get(n - 1).size();
        //declare a 2D array to store pre-calculated values
        int[][] grid = new int[n][m];
        // intialize it with -1
        for(int[] a : grid)
            Arrays.fill(a, -1);
        // recursive call starting from 0, 0
        return getMinPathSum(triangle, grid, n, m, 0, 0);
    }
    private int getMinPathSum(List<List<Integer>> triangle, int[][] grid, int n, int m, int i, int j){
        // if i/j reaches last cell return the current cell value
        if(i == n - 1 || j == m - 1) return triangle.get(i).get(j);
        if current cell value is -1 then calculate its min path sum till here
        if(grid[i][j] == -1){
            // get the left value from the triangle
            int left = getMinPathSum(triangle, grid, n, m, i + 1, j);
            // get the right value from the triangle
            int right = getMinPathSum(triangle, grid, n, m, i + 1, j + 1);
            // find the min from left and right and add it to the current cell value and store into grid
            grid[i][j] =  triangle.get(i).get(j) + Math.min(left, right);
        }
        //return the current cell value
        return grid[i][j];
    }
}