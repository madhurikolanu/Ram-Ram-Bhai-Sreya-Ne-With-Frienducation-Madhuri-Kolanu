class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        // size of obstacleGrid
        int m = obstacleGrid.length;
        // size of 0th array of obstaclegrid
        int n = obstacleGrid[0].length;
        // declare a 2d array to store precalculated array values
        int[][] grid = new int[m][n];
        // intialize with -1 value to identify whether calculated or not
        for(int[] a : grid)
            Arrays.fill(a, -1);
        // call a recurisve function starting with 0, 0
        return getUniquePathsWithObstacles(obstacleGrid, grid, m, n, 0, 0);
    }
    private int getUniquePathsWithObstacles(int[][] obstacleGrid, int[][] grid, int m, int n, int i, int j){
        // if any of i or j reaches m/n then it is not a valid path so return 0
        if(i == m || j == n) return 0;
        // if current cell value is 1 then there is an obstacle so return 0
        if(obstacleGrid[i][j] == 1) return 0;
        // if i and j both reaches the last cell then it is a valid path so return 1
        if(i == m - 1 && j == n - 1) return 1;
        // if current cell value is -1 then calculate its value by considering right and down
        if(grid[i][j] == -1){
            // first method is to check for right whether there is a path exists or not and second one is for down
            grid[i][j] = getUniquePathsWithObstacles(obstacleGrid, grid, m, n, i, j + 1) + getUniquePathsWithObstacles(obstacleGrid, grid, m, n, i + 1, j);
        }
        // reutrn current cell after all calculations
        return grid[i][j];
    }
}