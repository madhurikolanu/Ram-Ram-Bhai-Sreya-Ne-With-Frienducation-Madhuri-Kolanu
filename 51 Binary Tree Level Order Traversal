/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> levelOrderTraversalList = new ArrayList<List<Integer>>();
        // if given root is null return empty list
        if(root == null) return levelOrderTraversalList;
        // use queue to get the each level nodes and their left and right pointers
        Queue<TreeNode> queue = new LinkedList<>();
        // intially add root node into the queue
        queue.add(root);
        // traverse through the queue
        // for each node create a list and add its rootnode val then remove it from queue
        // check if left and right are not null then add them into the queue
        while(queue.size() > 0){
            int queueSize = queue.size();
            List<Integer> levelOrderTraversal = new ArrayList<>();
            for(int index = 0; index < queueSize; index++){
                TreeNode tempNode = queue.poll();
                levelOrderTraversal.add(tempNode.val);
                if(tempNode.left != null)
                    queue.add(tempNode.left);
                if(tempNode.right != null)
                    queue.add(tempNode.right);
            }
            // after iteration through each node add the list to final list this would be level 0 nodes then level 1 nodes and so on
            levelOrderTraversalList.add(levelOrderTraversal);
        }
        return levelOrderTraversalList;
    }
}