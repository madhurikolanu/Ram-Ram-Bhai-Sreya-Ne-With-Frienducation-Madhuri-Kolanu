class Solution {
    public boolean isPalindrome(String s) {
       /* String onlyChars = s.replaceAll("[^a-zA-Z0-9]", "");
        onlyChars = onlyChars.toLowerCase();
        int n = onlyChars.length();
        int i = 0;
        int j = n-1;
        boolean isValid = true;
        while(i <= j){
            if(onlyChars.charAt(i) == onlyChars.charAt(j)){
                i++;
                j--;
            }
            else{
               return false;
            }
        }
        return true;
        int n = s.length();
        int start = 0;
        int end = n-1;
        while(start <= end){
            char currFirst = s.charAt(start);
            char currLast = s.charAt(end);
            if(!Character.isLetterOrDigit(currFirst)){
                start++;
            }
            else if(!Character.isLetterOrDigit(currLast)){
                end--;
            }
            else{
                if(Character.toLowerCase(currFirst) != Character.toLowerCase(currLast)){
                    return false;
                }
                start++;
                end--;
            }
        }
        return true;*/
        int forw = 0; //pointer starting from the start
        char[] tmp = new char[s.length()]; //temporary array to keep the alphanumeric characters to check if it is a palindrome
        int len = 0; //poiter to keep track of the end of the string

        //store every alphanumeric value in the tmp array
        for(int i = 0; i < s.length(); i++){
            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){
                tmp[len++] = s.charAt(i);
            }else if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'){
                tmp[len++] = (char)((int)s.charAt(i) + (int)' ');
            }else if(s.charAt(i) >= '0' && s.charAt(i) <= '9'){
                tmp[len++] = s.charAt(i);
            }
        }

        //return true for the base cases
        if(len == 0 || len == 1) return true;

        /*
        * it is a valid palindrome if the character in forw and len-1 indices are the same until two indices overlap or goes beyond each other
        * if it doesn't, then it is not a valid palindrome.
        */
        while(tmp[forw++] == tmp[-1+len--]){
            if(forw == len-1) return true;
            if(forw > len) return true;
        }
        return false;
    }
}