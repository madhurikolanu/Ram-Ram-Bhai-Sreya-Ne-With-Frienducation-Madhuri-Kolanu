class MinStack {

    Stack<Long> stack;
    // to store min value
    Long minVal;

    public MinStack() {
        stack = new Stack<>();
        minVal = Long.MAX_VALUE;
    }

    public void push(int val) {
        Long longVal = Long.valueOf(val);
        // if stack is empty update min value as current value
        if(stack.size() == 0) {
            minVal = longVal;
            stack.push(longVal);
        }
        else{
            // else check if it is lesser than minval then push the element twice of current value - minVal and then update minval
            if(longVal < minVal) {
                stack.push(2 * longVal - minVal);
                minVal = longVal;
            }
            // otherwise just push the current value
            else stack.push(longVal);
        }
    }

    public void pop() {
        Long top = stack.peek();
        // when we pop element we need to keep track of min value also so if top is lesser than minval then update minval by twice of minval - top element
        if(top < minVal) {
            Long val = 2 * minVal - top;
            minVal = val;
        }
        stack.pop();
    }

    public int top() {
        // if top element is less than minval then return minval else top element because top element may contain modified value
        if(stack.peek() < minVal) return minVal.intValue();
        return stack.peek().intValue();
    }

    public int getMin() {
        return minVal.intValue();
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */