//{ Driver Code Starts
//Initial Template for JAVA

import java.util.LinkedList;
import java.util.Queue;
import java.io.*;
import java.util.*;

class Node{
    int data;
    Node left;
    Node right;
    Node(int data){
        this.data = data;
        left=null;
        right=null;
    }
}

public class Tree {

    static Node buildTree(String str){

        if(str.length()==0 || str.charAt(0)=='N'){
            return null;
        }

        String ip[] = str.split(" ");
        // Create the root of the tree
        Node root = new Node(Integer.parseInt(ip[0]));
        // Push the root to the queue

        Queue<Node> queue = new LinkedList<>();

        queue.add(root);
        // Starting from the second element

        int i = 1;
        while(queue.size()>0 && i < ip.length) {

            // Get and remove the front of the queue
            Node currNode = queue.peek();
            queue.remove();

            // Get the current node's value from the string
            String currVal = ip[i];

            // If the left child is not null
            if(!currVal.equals("N")) {

                // Create the left child for the current node
                currNode.left = new Node(Integer.parseInt(currVal));
                // Push it to the queue
                queue.add(currNode.left);
            }

            // For the right child
            i++;
            if(i >= ip.length)
                break;

            currVal = ip[i];

            // If the right child is not null
            if(!currVal.equals("N")) {

                // Create the right child for the current node
                currNode.right = new Node(Integer.parseInt(currVal));

                // Push it to the queue
                queue.add(currNode.right);
            }
            i++;
        }

        return root;
    }
    static void printInorder(Node root)
    {
        if(root == null)
            return;

        printInorder(root.left);
        System.out.print(root.data+" ");

        printInorder(root.right);
    }

	public static void main (String[] args) throws IOException{
	        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

	        int t=Integer.parseInt(br.readLine());

	        while(t > 0){
	            String s = br.readLine();
    	    	Node root = buildTree(s);

                Solution ob = new Solution();

                ArrayList<Integer> vec = ob.topView(root);
                for(int x : vec)
                    System.out.print(x + " ");
                System.out.println();

                t--;
        }
    }
}
// } Driver Code Ends


//User function Template for Java

/*
class Node{
    int data;
    Node left;
    Node right;
    Node(int data){
        this.data = data;
        left=null;
        right=null;
    }
}
*/
class Pair{
    Node node;
    int verticalDepth;
    Pair(Node n, int d){
        node = n;
        verticalDepth = d;
    }
}
class Solution
{
    //Function to return a list of nodes visible from the top view
    //from left to right in Binary Tree.
    static ArrayList<Integer> topView(Node root)
    {
        // add your code
        // output array to store only top view node values
        ArrayList<Integer> topViewNodesList = new ArrayList<>();
        // hahsmap to store key as verticaldepth and value as node values that comes under this depth
        HashMap<Integer, List<Integer>> hashMapNodes = new HashMap<>();
        // queue to store all left and right nodes
        Queue<Pair> queue = new LinkedList<>();
        // intially store root node
        queue.add(new Pair(root, 0));
        // these variables are to store min and max depth values that a tree has
        int minDepth = 0, maxDepth = 0;
        // iterate through queue until it is empty
        while(queue.size() > 0){
            // fetch the top most pair in queue
            Pair pair = queue.poll();

            int verticalDepth = pair.verticalDepth;
            // arr to store current node value if it doesnt contains hashmap
            List<Integer> arr = new ArrayList<Integer>();

            if(hashMapNodes.containsKey(verticalDepth)){
                 arr = hashMapNodes.get(verticalDepth);
            }
            arr.add(pair.node.data);
            // update hashmap with the current node value
            hashMapNodes.put(verticalDepth, arr);
            // update min and max dpeths with the current node depth value
            minDepth = Math.min(minDepth, verticalDepth);
            maxDepth = Math.max(maxDepth, verticalDepth);
            // push current node's left and right if not empty
            if(pair.node.left != null)
                queue.add(new Pair(pair.node.left, verticalDepth - 1));
            if(pair.node.right != null)
                queue.add(new Pair(pair.node.right, verticalDepth + 1));
        }
        // iterate from minDepth till maxDepth and fetch the top most value present in hashmap
        for(int index = minDepth; index <= maxDepth; index++){
            topViewNodesList.add(hashMapNodes.get(index).get(0));
        }
        return topViewNodesList;
    }
}