//{ Driver Code Starts
import java.io.*;
import java.lang.*;
import java.util.*;

class Job {
    int id, profit, deadline;
    Job(int x, int y, int z){
        this.id = x;
        this.deadline = y;
        this.profit = z;
    }
}

class GfG {
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        //testcases
		int t = Integer.parseInt(br.readLine().trim());
		while(t-->0){
            String inputLine[] = br.readLine().trim().split(" ");

            //size of array
            int n = Integer.parseInt(inputLine[0]);
            Job[] arr = new Job[n];
            inputLine = br.readLine().trim().split(" ");

            //adding id, deadline, profit
            for(int i=0, k=0; i<n; i++){
                arr[i] = new Job(Integer.parseInt(inputLine[k++]), Integer.parseInt(inputLine[k++]), Integer.parseInt(inputLine[k++]));
            }

            Solution ob = new Solution();

            //function call
            int[] res = ob.JobScheduling(arr, n);
            System.out.println (res[0] + " " + res[1]);
        }
    }
}
// } Driver Code Ends


class Solution
{
    //Function to find the maximum profit and the number of jobs done.
    int[] JobScheduling(Job arr[], int n)
    {
        // Your code here
        // sort the given array according to the deadline
        Arrays.sort(arr, new Comparator<Job>(){
            @Override
            public int compare(Job j1, Job j2){
                return j1.deadline - j2.deadline;
            }
        });
        int[] jobsWithMaxProfit = new int[2];
        PriorityQueue<Integer> priorityQueue = new PriorityQueue<>();
        priorityQueue.add(arr[0].profit);
        // traverse through array and check if deadline is equal to size and keep the max profit
        // if queue size is with in the deadline simply add the profit
        for(int index = 1; index < n; index++){
            if(arr[index].deadline == priorityQueue.size()){
                if(priorityQueue.peek() < arr[index].profit)
                    priorityQueue.poll();
            }
            if(priorityQueue.size() < arr[index].deadline)
                 priorityQueue.add(arr[index].profit);
        }
        jobsWithMaxProfit[0] = priorityQueue.size();
        while(!priorityQueue.isEmpty()){
            jobsWithMaxProfit[1] += priorityQueue.poll();
        }
        return jobsWithMaxProfit;
    }
}

/*
class Job {
    int id, profit, deadline;
    Job(int x, int y, int z){
        this.id = x;
        this.deadline = y;
        this.profit = z;
    }
}
*/